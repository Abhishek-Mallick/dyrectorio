image: node:17.1-alpine

stages:
  - dependencies
  - lint
  - test
  - build
  - build_docker
  - deploy

cache: &npm_cache
  key: $CI_COMMIT_REF_SLUG-$CI_PROJECT_DIR-npm
  paths:
    - .npm/
  policy: pull

before_script:
  - npm ci --arch=x64 --platform=linuxmusl --cache .npm --prefer-offline
  - npm run disable-telemetry

.docker_auth: &docker_auth
  before_script:
    - mkdir -p $HOME/.docker
    - echo $DOCKER_AUTH_CONFIG > $HOME/.docker/config.json
    - apk add --no-cache docker-compose

.set_latest_build_env: &set_latest_build_env
  - export TIME_ZONE=$LATEST_TIME_ZONE
  - export NEXT_PUBLIC_RECAPTCHA_SITE_KEY=$LATEST_NEXT_PUBLIC_RECAPTCHA_SITE_KEY
  - export NGINX_PORT=8000

.set_latest_env: &set_latest_env
  - export TIME_ZONE=$LATEST_TIME_ZONE
  - export NEXT_PUBLIC_RECAPTCHA_SITE_KEY=$LATEST_NEXT_PUBLIC_RECAPTCHA_SITE_KEY
  - export NGINX_PORT=$LATEST_NGINX_PORT
  - export KRATOS_DEV=true
  - export AUTH_URL=$LATEST_AUTH_URL
  - export COOKIE_SECRET=$LATEST_COOKIE_SECRET
  - export KRATOS_URL=$LATEST_KRATOS_URL
  - export POSTGRES_PASSWORD=$LATEST_POSTGRES_PASSWORD
  - export RECAPTCHA_SECRET_KEY=$LATEST_RECAPTCHA_SECRET_KEY
  - export SERVER_NAME=$LATEST_SERVER_NAME
  - export CRUX_UI_URL=$LATEST_CRUX_UI_URL
  - export CRUX_UI_ADDRESS=$LATEST_CRUX_UI_ADDRESS
  - export AUTH_API_KEY=$LATEST_AUTH_API_KEY
  - export SMTP_PASSWORD=$SENDGRID_KEY

.set_stable_build_env: &set_stable_build_env
  - export TIME_ZONE=$STABLE_TIME_ZONE
  - export NEXT_PUBLIC_RECAPTCHA_SITE_KEY=$STABLE_NEXT_PUBLIC_RECAPTCHA_SITE_KEY
  - export NGINX_PORT=8000

install_deps:
  stage: dependencies
  cache:
    <<: *npm_cache
    policy: push
  before_script: []
  script:
    - npm ci --arch=x64 --platform=linuxmusl
  only:
    changes:
      - package-lock.json

linter:
  stage: lint
  allow_failure: false
  dependencies:
    - install_deps
  script:
    - echo 'TBD LINTER'
    # - npm run lint
    # - npm run prettier

unit_tests:
  stage: test
  dependencies:
    - linter
  allow_failure: false
  script:
    - echo 'TBD UNIT TESTS'
  #  - npm run test

e2e_tests:
  stage: test
  dependencies:
    - linter
  allow_failure: false
  script:
    - echo 'TBD E2E TESTS'

build_app:
  stage: build
  allow_failure: false
  except:
    - main
  dependencies:
    - unit_tests
    - e2e_tests
  script:
    - *set_latest_build_env
    - npm run build
    - npm prune --production
  artifacts:
    paths:
      - ./node_modules
      - ./.next
    expire_in: 20 minutes

build_stable_app:
  stage: build
  allow_failure: false
  only:
    - main
  dependencies:
    - unit_tests
    - e2e_tests
  script:
    - *set_stable_build_env
    - npm run build
    - npm prune --production
  artifacts:
    paths:
      - ./node_modules
      - ./.next
    expire_in: 20 minutes

build_image:
  stage: build_docker
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - build_app
  only:
    - develop
  allow_failure: false
  cache: []
  <<: *docker_auth
  script:
    - export AUTH_VERSION=$CI_ENVIRONMENT_NAME
    - *set_latest_build_env
    - docker-compose -f kratos.yaml -f auth.yaml -f nginx.latest.yaml build
    - docker-compose -f kratos.yaml -f auth.yaml -f nginx.latest.yaml push
  environment:
    name: latest

build_stable_image:
  stage: build_docker
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - build_stable_app
  only:
    - main
  allow_failure: false
  cache: []
  <<: *docker_auth
  script:
    - export AUTH_VERSION=$CI_ENVIRONMENT_NAME
    - *set_stable_build_env
    - docker-compose -f kratos.yaml -f auth.yaml build
    - docker-compose -f kratos.yaml -f auth.yaml push
  environment:
    name: stable

"Deploy latest to mogyoro":
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  when: manual
  allow_failure: false
  cache: []
  before_script: []
  <<: *docker_auth
  only:
    - develop
  tags:
    - crux-latest
  script:
    - export AUTH_VERSION=$CI_ENVIRONMENT_NAME
    - *set_latest_env
    - docker network create --driver bridge crux-intranet || true
    - docker-compose -f kratos.yaml -f auth.yaml -f nginx.latest.yaml pull
    - docker-compose -f kratos.yaml -f auth.yaml -f nginx.latest.yaml down
    - docker-compose -f kratos.yaml -f auth.yaml -f nginx.latest.yaml up -d
  environment:
    name: latest
  dependencies:
    - build_image
