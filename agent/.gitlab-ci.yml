image: golang:alpine3.16

.docker-auth-steps: &docker-auth-steps
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY" 
  - apk add alpine-sdk

.go-changes: &go-changes
  - go.mod
  - go.sum
  - Makefile
  - .gitlab-ci.yml
  - .golangci.yml
  - pkg/**/**.go
  - cmd/**/**.go

# Put the repository in the $GOPATH
before_script:
  - apk add git jq alpine-sdk go


stages:
  - lint
  - test
#  - integration-test
  - compile
  - build
  - deploy

lint:
  image: index.docker.io/golangci/golangci-lint:latest-alpine
  stage: lint
  script:
    - "[ -e .golangci.yml ] || cp /golangci/.golangci.yml ."
    - golangci-lint run --issues-exit-code 1 --out-format code-climate --timeout=10m | tee code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  only:
    changes:
      *go-changes
  artifacts:
    reports:
      codequality: code-quality-report.json
    paths:
      - code-quality-report.json
    expire_in: 1 week

test-unit:
  stage: test
  script:
    - go install github.com/t-yuki/gocover-cobertura@latest
    - make test-unit
    - go test  ./... -v -coverprofile coverage.txt
    - gocover-cobertura < coverage.txt > coverage.xml
  coverage: /^coverage:\s(\d+(?:\.\d+)?%)/
  only:
    changes:
      *go-changes
  artifacts:
    name: $CI_JOB_NAME/coverage.txt
    paths:
      - coverage.xml
    expire_in: 7 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# todo(nandi): fix integration tests, dind config was not reliable
# https://dyo.atlassian.net/jira/software/projects/CRX/boards/1?selectedIssue=CRX-183
# test-dagent-integration: 
#   image: index.docker.io/library/docker:latest
#   stage: integration-test
#   services:
#     - docker:dind
#   variables:
#     DOCKER_HOST: "tcp://localhost:2378"
#   only:
#     changes:
#       *go-changes
#   dependencies:
#     - test-unit
#   script:
#     - make test-dagent-docker

# todo(nandi): fix integration tests, k3s is not a complete tool for integration testing, check eg. k3d
# https://dyo.atlassian.net/jira/software/projects/CRX/boards/1?selectedIssue=CRX-183
# test-crane-integration: 
#   image: registry.gitlab.com/gitlab-org/cluster-integration/helm-install-image/releases/3.7.2-kube-1.21.5-alpine-3.15
#   stage: integration-test
#   services:
#     - name: registry.gitlab.com/gitlab-org/cluster-integration/test-utils/k3s-gitlab-ci/releases/v1.22.2-k3s2
#       alias: k3s
#   dependencies:
#     - test-unit
#   script:
#     - apk add curl
#     - curl -f k3s:8081 > k3s.yaml
#     - make k3s-test

security:
  stage: lint
  script:
    - go install github.com/securego/gosec/v2/cmd/gosec@latest
    - gosec ./...

compile-binaries:
  stage: compile
  script:
    - make compile-both
  artifacts:
    paths:
      - build/out/crane
      - build/out/dagent

# Job template to reduce code duplication in CI
.docker-build: &docker-build
  image: index.docker.io/library/docker:20.10.12-alpine3.15
  stage: deploy
  before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login --username "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY" 
  - apk add alpine-sdk
  dependencies:
    - compile-binaries

build-dev:
  <<: *docker-build
  only:
    refs:
      - develop
  script:
    - make image_version=latest bbpb 

build-main:
  <<: *docker-build
  only:
    refs:
      - main
  script:
    - make image_version=stable bbpb
